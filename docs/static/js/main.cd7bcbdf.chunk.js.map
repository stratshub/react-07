{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","GifItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,8BACI,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEtCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBU,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,e,+BCN/CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACD,KACRC,EAHa,iDAGmCC,UAAUH,GAH7C,kBAEL,KAFK,oBACJ,oCADI,SAKAI,MAAMF,GALN,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAS,MAAO,CAAEC,GAAID,EAAIC,GAAIC,MAAOF,EAAIE,MAAOV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARpF,kBAUZM,GAVY,4CAAH,sDCEPO,EAAU,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC7B,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACtB,ECFwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAhB,GACfc,EAAS,CACLf,KAAMC,EACNY,SAAS,SAGtB,CAACpB,IAEGqB,EDbuBI,CAAazB,GAA9BQ,EAAb,EAAOD,KAAYa,EAAnB,EAAmBA,QAKnB,OAHAM,QAAQC,IAAIP,GACZM,QAAQC,IAAInB,GAGR,gCACI,oBAAIQ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEQR,EAAKC,KAAI,SAAAC,GAAG,OAAK,cAAC,EAAD,eAA0BA,GAAZA,EAAIC,aEb1CiB,EAAe,WAGxB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAMA,OACI,gCACI,gDAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCnB7D8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cd7bcbdf.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => setInputValue(e.target.value);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n\n            setInputValue('');\n        }\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n            </form>\n        </div>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const apiKey = 'AF9ACmIJoBidQd3wMJ2jsJJ2OQCzdIrH';\n    const limit = '10';\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=${apiKey}`;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(gif => { return { id: gif.id, title: gif.title, url: gif.images.downsized_medium.url } });\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifItem = ({ title, url }) => {\n    return (\n        <div className=\"card  animate__animated animate__backInLeft\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifItem } from './GifItem';\n\nexport const GifGrid = ({ category }) => {\n    const {data: gifs, loading} = useFetchGifs(category);\n\n    console.log(loading);\n    console.log(gifs);\n\n    return (\n        <div>\n            <h2 className=\"animate__animated animate__fadeIn\">{category}</h2>\n\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\n            <div className=\"card-grid\">\n                {\n                    gifs.map(gif => (<GifItem key={gif.id} {...gif} />))\n                }\n            </div>\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(category).then(gifs => {\n                setstate({\n                    data: gifs,\n                    loading: false\n                });\n        });\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    // const handleAdd = () => setcategories([...categories, 'Inuyasha']);\n\n    // const handleAdd = () => setCategories(cats => [...cats, 'Inuyasha']);\n\n    return (\n        <div>\n            <h2>Gif Expert App</h2>\n\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n\n            <ol>\n                {\n                    categories.map(category => <GifGrid key={category} category={category} />)\n                }\n            </ol>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}